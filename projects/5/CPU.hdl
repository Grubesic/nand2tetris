// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Instruction decoder
    Not(in=instruction[15], out=instA);
    Not(in=instA, out=instC);
    And(a=instC, b=instruction[4], out=loadD);

    And(a=instC, b=instruction[5], out=destA);
    Or(a=instA, b=destA, out=loadA);

    And(a=instC, b=instruction[12], out=AMtoALU);

    // JGT jump condition greater than
    Or(a=zr, b=ng, out=jgtCondition);
    Not(in=jgtCondition, out=positive);
    And(a=positive, b=instruction[0], out=jgt);

    // JEQ jump condition equal
    And(a=zr, b=instruction[1], out=jeq);

    // JLT jump condition less than 0
    And(a=ng, b=instruction[2], out=jlt);

    // JLE
    Or(a=jlt, b=jeq, out=jle);

    Or(a=jle, b=jgt, out=jumpToA);              // load PC if cond met and jump if cond
    And(a=instC, b=jumpToA, out=loadPC);

    And(a=instC, b=instruction[3], out=writeM);

    // First mux
    Mux16(a=outAlu, b=instruction, sel=instA, out=outFirstMux);

    // A-Register
    ARegister(in=outFirstMux, load=loadA, out=outA, out[0..14]=addressM);

    // D-Register
    DRegister(in=outAlu, load=loadD, out=outD);

    // Second mux
    Mux16(a=outA, b=inM, sel=AMtoALU, out=outSecondMux);

	ALU(x=outD,y=outSecondMux,
	zx=instruction[11],
	nx=instruction[10],
	zy=instruction[9],
	ny=instruction[8],
	f=instruction[7],
	no=instruction[6],
	out=outAlu, out=outM ,zr=zr,ng=ng);

	PC(in=outA,inc=true,load=loadPC,reset=reset,out[0..14]=pc);

}